# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ConveyorTemperature.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import os
from time import sleep
from dotenv import load_dotenv
from PyQt5.QtGui import QIcon
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtSql import QSqlDatabase, QSqlQuery

load_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__), '..', '.env'))

temp_in_max = 0
temp_in_min = 0

class Ui_TempWindow(object):

    # database connect 
    def db_connect(self):
        db_path = os.getenv('DATABASE_PATH_u')

        if not os.path.exists(db_path):
            print(f"Database file does not exist at: {db_path}")
            return None

        print(f"Database file found: {db_path}")

        # Initialize the database connection if not already done
        if not QSqlDatabase.contains("speed_connection"):
            self.db = QSqlDatabase.addDatabase("QSQLITE", "speed_connection")
            self.db.setDatabaseName(db_path)
        else:
            self.db = QSqlDatabase.database("speed_connection")

        # Attempt to open the database
        if not self.db.open():
            print(f"Failed to open database: {self.db.lastError().text()}")
            return None

        print("Database connected successfully!")
        return self.db

    def close_connection(self):
        if self.db and self.db.isOpen():
            self.db.close()
            print("Database connection closed.")
        else:
            print("No open database connection to close.")

    def db_insert(self):
        
        try:
            conn = self.db_connect()

            if conn:
                max_v = int(self.MaxValue.text())
                min_v = int(self.MinValue.text())

                print(f"Max Temp: {max_v}, Min Temp: {min_v}")

                if max_v and min_v:
                    query = QSqlQuery(conn)

                    if not query.exec_("BEGIN TRANSACTION;"):
                        print("Error starting transaction:", query.lastError().text())

                    # Correct query syntax
                    insert = "INSERT INTO Temperature (MaxTemp, MinTemp) VALUES (?, ?)"
                    query.prepare(insert)
                    query.addBindValue(max_v)
                    query.addBindValue(min_v)

                    if query.exec_():
                        query.exec_("COMMIT;")
                        print("Data inserted successfully.")
                        # self.DirValue.clear()
                        # self.SpeedValue.clear()
                        query.finish()
                    else:
                        print("Error executing query:", query.lastError().text())

                    
                else:
                    print("No valid data to insert")
            else:
                print("Failed to connect to the database.")
        except Exception as e:
            print(f"Error: {e}")
            sleep(1)
        finally:
            self.close_connection()

    def btn_up_temp_max(self):
        global temp_in_max

        if temp_in_max >= -55 and temp_in_max < 125:
            temp_in_max += 5 
            self.MaxValue.setText(str(temp_in_max))

    def btn_down_temp_max(self):
        global temp_in_max

        if temp_in_max > -55 and temp_in_max <= 125:
            temp_in_max -= 5 
            self.MaxValue.setText(str(temp_in_max))

    def btn_up_temp_min(self):
        global temp_in_min

        if temp_in_min >= -55 and temp_in_min < 125:
            temp_in_min += 5 
            self.MinValue.setText(str(temp_in_min))

    def btn_down_temp_min(self):
        global temp_in_min

        if temp_in_min > -55 and temp_in_min <= 125:
            temp_in_min -= 5
            self.MinValue.setText(str(temp_in_min))

    def center(self, window):
        screen = QtWidgets.QDesktopWidget().screenGeometry()
        size = window.geometry()
        x = (screen.width() - size.width()) // 2
        y = (screen.height() - size.height()) // 2
        window.move(x, y)

    def openMonitoringdWindow(self):
        from Conveyor1 import Ui_MonitoringWindow

        self.TempWindow.close() 
        sleep(0.1)

        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_MonitoringWindow()
        self.ui.setupUi(self.window)
        self.ui.center(self.window)
        self.window.show()

    def setupUi(self, TempWindow):
        TempWindow.setObjectName("TempWindow")
        TempWindow.resize(1024, 530)


        self.TempWindow = TempWindow

        self.centralwidget = QtWidgets.QWidget(TempWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBoxTemp_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBoxTemp_2.setGeometry(QtCore.QRect(450, 10, 451, 271))
        self.groupBoxTemp_2.setObjectName("groupBoxTemp_2")
        self.TempGraph2 = QtWidgets.QWidget(self.groupBoxTemp_2)
        self.TempGraph2.setGeometry(QtCore.QRect(0, 20, 451, 251))
        self.TempGraph2.setStyleSheet("background-color: rgb(61, 56, 70);")
        self.TempGraph2.setObjectName("TempGraph2")
        self.groupBoxMenu = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBoxMenu.setGeometry(QtCore.QRect(910, 10, 101, 501))
        self.groupBoxMenu.setObjectName("groupBoxMenu")
        self.BtnMonitoring = QtWidgets.QPushButton(self.groupBoxMenu)
        self.BtnMonitoring.setGeometry(QtCore.QRect(10, 30, 80, 115))
        font = QtGui.QFont()
        font.setKerning(True)
        self.BtnMonitoring.setFont(font)
        self.BtnMonitoring.setAutoFillBackground(False)
        self.BtnMonitoring.setStyleSheet("background-color: rgb(143, 240, 164);")
        self.BtnMonitoring.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../icons/icons8-monitoring-100.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.BtnMonitoring.setIcon(icon)
        self.BtnMonitoring.setIconSize(QtCore.QSize(50, 50))
        self.BtnMonitoring.setShortcut("")
        self.BtnMonitoring.setCheckable(False)
        self.BtnMonitoring.setObjectName("BtnMonitoring")

        self.BtnMonitoring.clicked.connect(self.openMonitoringdWindow)

        self.ExitBtn = QtWidgets.QPushButton(self.groupBoxMenu)
        self.ExitBtn.setGeometry(QtCore.QRect(10, 390, 80, 101))
        self.ExitBtn.setStyleSheet("background-color: rgb(246, 97, 81);")
        self.ExitBtn.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../icons/icons8-exit-100.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ExitBtn.setIcon(icon1)
        self.ExitBtn.setIconSize(QtCore.QSize(50, 50))
        self.ExitBtn.setObjectName("ExitBtn")

        # self.ExitBtn.clicked.connect(TempWindow.close)
        self.ExitBtn.clicked.connect(self.pop_up_exit)

        self.groupBoxTemp2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBoxTemp2.setGeometry(QtCore.QRect(450, 290, 451, 221))
        self.groupBoxTemp2.setObjectName("groupBoxTemp2")
        self.labelTemp = QtWidgets.QLabel(self.groupBoxTemp2)
        self.labelTemp.setGeometry(QtCore.QRect(0, 20, 451, 201))
        font = QtGui.QFont()
        font.setFamily("Sans Serif")
        font.setPointSize(50)
        font.setBold(True)
        font.setWeight(75)
        self.labelTemp.setFont(font)
        self.labelTemp.setFocusPolicy(QtCore.Qt.NoFocus)
        self.labelTemp.setAlignment(QtCore.Qt.AlignCenter)
        self.labelTemp.setObjectName("labelTemp")
        self.BtnSave = QtWidgets.QPushButton(self.centralwidget)
        self.BtnSave.setGeometry(QtCore.QRect(10, 450, 431, 61))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("../icons/icons8-save-100.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.BtnSave.setIcon(icon2)
        self.BtnSave.setIconSize(QtCore.QSize(30, 30))
        self.BtnSave.setObjectName("BtnSave")

        # self.BtnSave.clicked.connect(self.db_insert)
        self.BtnSave.clicked.connect(self.pop_up_save)

        self.groupBoxMaxTemp = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBoxMaxTemp.setGeometry(QtCore.QRect(10, 10, 421, 131))
        self.groupBoxMaxTemp.setObjectName("groupBoxMaxTemp")
        self.MaxValue = QtWidgets.QLineEdit(self.groupBoxMaxTemp)
        self.MaxValue.setGeometry(QtCore.QRect(10, 30, 201, 91))
        font = QtGui.QFont()
        font.setFamily("Sans Serif")
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.MaxValue.setFont(font)
        self.MaxValue.setAlignment(QtCore.Qt.AlignCenter)
        self.MaxValue.setObjectName("MaxValue")
        self.BtnUpMax = QtWidgets.QPushButton(self.groupBoxMaxTemp)
        self.BtnUpMax.setGeometry(QtCore.QRect(220, 30, 88, 91))
        self.BtnUpMax.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("../icons/icons8-up-100.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.BtnUpMax.setIcon(icon3)
        self.BtnUpMax.setIconSize(QtCore.QSize(50, 50))
        self.BtnUpMax.setObjectName("BtnUpMax")

        self.BtnUpMax.clicked.connect(self.btn_up_temp_max)

        self.BtnDownMax = QtWidgets.QPushButton(self.groupBoxMaxTemp)
        self.BtnDownMax.setGeometry(QtCore.QRect(320, 30, 88, 91))
        self.BtnDownMax.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("../icons/icons8-down-arrow-100.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.BtnDownMax.setIcon(icon4)
        self.BtnDownMax.setIconSize(QtCore.QSize(50, 50))
        self.BtnDownMax.setObjectName("BtnDownMax")

        self.BtnDownMax.clicked.connect(self.btn_down_temp_max)

        self.groupBoxMinTemp = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBoxMinTemp.setGeometry(QtCore.QRect(10, 150, 421, 131))
        self.groupBoxMinTemp.setObjectName("groupBoxMinTemp")
        self.MinValue = QtWidgets.QLineEdit(self.groupBoxMinTemp)
        self.MinValue.setGeometry(QtCore.QRect(10, 30, 201, 91))
        font = QtGui.QFont()
        font.setFamily("Sans Serif")
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.MinValue.setFont(font)
        self.MinValue.setAlignment(QtCore.Qt.AlignCenter)
        self.MinValue.setObjectName("MinValue")
        self.BtnUpMin = QtWidgets.QPushButton(self.groupBoxMinTemp)
        self.BtnUpMin.setGeometry(QtCore.QRect(220, 30, 88, 91))
        self.BtnUpMin.setText("")
        self.BtnUpMin.setIcon(icon3)
        self.BtnUpMin.setIconSize(QtCore.QSize(50, 50))
        self.BtnUpMin.setObjectName("BtnUpMin")

        self.BtnUpMin.clicked.connect(self.btn_up_temp_min)

        self.BtnDownMin = QtWidgets.QPushButton(self.groupBoxMinTemp)
        self.BtnDownMin.setGeometry(QtCore.QRect(320, 30, 88, 91))
        self.BtnDownMin.setText("")
        self.BtnDownMin.setIcon(icon4)
        self.BtnDownMin.setIconSize(QtCore.QSize(50, 50))
        self.BtnDownMin.setObjectName("BtnDownMin")

        self.BtnDownMin.clicked.connect(self.btn_down_temp_min)

        TempWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(TempWindow)
        QtCore.QMetaObject.connectSlotsByName(TempWindow)

    def retranslateUi(self, TempWindow):
        _translate = QtCore.QCoreApplication.translate
        TempWindow.setWindowIcon(QIcon("/home/rekinsa/Documents/conveyorITERAv1/icons/icons-1.png"))
        TempWindow.setWindowTitle(_translate("TempWindow", "Control - Temperature "))
        self.groupBoxTemp_2.setTitle(_translate("TempWindow", "Temperature Graph"))
        self.groupBoxMenu.setTitle(_translate("TempWindow", "Menu"))
        self.groupBoxTemp2.setTitle(_translate("TempWindow", "Temperature"))
        self.labelTemp.setText(_translate("TempWindow", "20°C"))
        self.BtnSave.setText(_translate("TempWindow", "    Save"))
        self.groupBoxMaxTemp.setTitle(_translate("TempWindow", "Max. Temp"))
        self.MaxValue.setText(_translate("TempWindow", str(temp_in_max)))
        self.groupBoxMinTemp.setTitle(_translate("TempWindow", "Min. Temp"))
        self.MinValue.setText(_translate("TempWindow", str(temp_in_min)))

    def pop_up_save(self):
        msg = QMessageBox()
        msg.setWindowTitle("Info")
        msg.setText("Save data ?")
        msg.setInformativeText("Are you sure?")
        msg.setIcon(QMessageBox.Question)
        msg.resize(600, 400)
        msg.setStandardButtons(QMessageBox.Yes | QMessageBox.Cancel)
        msg.setDefaultButton(QMessageBox.Yes)

        # msg.buttonClicked.connect(self.db_insert)   

        x = msg.exec_()

        if x == QMessageBox.Yes:
            self.db_insert()
            print("yes")
        else:
            print("canceled")

    def pop_up_exit(self):
        msg = QMessageBox()
        msg.setWindowTitle("Info")
        msg.setText("Exit ?")
        msg.setInformativeText("Are you sure?")
        msg.setIcon(QMessageBox.Question)
        msg.resize(600, 400)
        msg.setStandardButtons(QMessageBox.Yes | QMessageBox.Cancel)
        msg.setDefaultButton(QMessageBox.Yes)

        # msg.buttonClicked.connect(TempWindow.close)

        x = msg.exec_()

        if x == QMessageBox.Yes:
            self.TempWindow.close()
            print("yes")
        else:
            print("canceled")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    app.setWindowIcon(QIcon("/home/rekinsa/Documents/conveyorITERAv1/icons/icons-1.png"))
    TempWindow = QtWidgets.QMainWindow()
    ui = Ui_TempWindow()
    ui.setupUi(TempWindow)
    ui.center(TempWindow)
    ui.db_connect()
    TempWindow.show()
    sys.exit(app.exec_())
